<?php
include_once '../../Back-end/Database/Database.php';
session_start();
class Game {
    private $conn;

    // Constructor accepts a database connection
    public function __construct($dbConnection) {
        $this->conn = $dbConnection;
    }

    // Insert a new game into the database
    public function insertGame($name, $description, $price, $releaseDate, $developer, $publisher) {
        $query = "INSERT INTO products (name, description, price, release_date, developer, publisher) 
                  VALUES (?, ?, ?, ?, ?, ?)";
    
        // Correct the parameter binding to match the data types
        // We use "ssssss" because all these parameters are strings except for price (which is a decimal)
        $stmt = $this->conn->prepare($query);
        $stmt->bind_param("ssssss", $name, $description, $price, $releaseDate, $developer, $publisher);
    
        if ($stmt->execute()) {
            $_SESSION['message'] = "Game successfully added.";
            header("Location: ../games/games.php");
        } else {
            return "Error: " . $stmt->error;
        }
    }

    // Update a game's details in the database
    public function updateGame($id, $name, $description, $price, $releaseDate, $developer, $publisher) {
        // Update query without `created_at` column because it's auto-generated by MySQL
        $query = "UPDATE products SET name = ?, description = ?, price = ?, release_date = ?, developer = ?, publisher = ? 
                  WHERE id = ?";
    
        // Prepare the statement
        $stmt = $this->conn->prepare($query);
    
        // Bind the parameters:
        // - $name, $description, $releaseDate, $developer, $publisher are strings ('s')
        // - $price is a decimal (treated as 'd' for double)
        // - $id is an integer (treated as 'i')
        $stmt->bind_param("ssssssi", $name, $description, $price, $releaseDate, $developer, $publisher, $id);
    
        // Execute the query
        if ($stmt->execute()) {
            $_SESSION['message'] = "Game successfully updated.";
            header("Location: ../games/games.php");
        } else {
            return "Error: " . $stmt->error;
        }
    }
    
    
    // Delete a game from the database
    public function deleteGame($id) {
        $query = "DELETE FROM products WHERE id = ?";

        $stmt = $this->conn->prepare($query);
        $stmt->bind_param("i", $id);

        if ($stmt->execute()) {
            $_SESSION['message'] = "Game successfully deleted.";
            header("Location: ../games/games.php");
            
        } else {
            return "Error: " . $stmt->error;
        }
    }
}

// Create a new database connection
$db = new Database();
$conn = $db->getConnection();

// Instantiate the Game class
$game = new Game($conn);

// Handle the form submissions based on the button pressed
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    // Handle edit action
    if (isset($_POST['edit'])) {
        $id = $_POST['id'];
        $name = $_POST['name'];
        $description = $_POST['description'];
        $price = $_POST['price'];
        $releaseDate = $_POST['release_date'];
        $developer = $_POST['developer'];
        $publisher = $_POST['publisher'];

        $result = $game->updateGame($id, $name, $description, $price, $releaseDate, $developer, $publisher);
        echo $result;
    }

    // Handle delete action
    if (isset($_POST['delete'])) {
        $id = $_POST['id'];

        $result = $game->deleteGame($id);
        echo $result;
    }

    // Handle insert action (if needed)
    if (isset($_POST['insert'])) {
        $name = $_POST['name'];
        $description = $_POST['description'];
        $price = $_POST['price'];
        $releaseDate = $_POST['release_date'];
        $developer = $_POST['developer'];
        $publisher = $_POST['publisher'];

        $result = $game->insertGame($name, $description, $price, $releaseDate, $developer, $publisher);
        echo $result;
    }
}
?>


